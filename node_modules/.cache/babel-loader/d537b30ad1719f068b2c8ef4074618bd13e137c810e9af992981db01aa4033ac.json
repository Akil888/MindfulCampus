{"ast":null,"code":"import * as tf from '@tensorflow/tfjs';\nlet sentimentModel = null;\nlet isModelLoaded = false;\n\n// Mock sentiment analysis using TensorFlow.js patterns\n// In a real implementation, you'd load a pre-trained model\nexport const initializeAI = async () => {\n  try {\n    console.log('Initializing AI models...');\n\n    // Simulate model loading time\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Create a simple mock model for demonstration\n    sentimentModel = {\n      predict: text => {\n        // Simple keyword-based sentiment analysis for demo\n        const positiveWords = ['good', 'great', 'happy', 'love', 'awesome', 'amazing', 'excellent', 'wonderful', 'fantastic', 'perfect', 'best', 'better', 'beautiful', 'brilliant', 'cheerful', 'delighted', 'excited', 'grateful', 'hopeful', 'inspired', 'joyful', 'optimistic', 'pleased', 'satisfied', 'thrilled'];\n        const negativeWords = ['bad', 'sad', 'hate', 'terrible', 'awful', 'horrible', 'worst', 'angry', 'depressed', 'anxious', 'stressed', 'worried', 'frustrated', 'disappointed', 'upset', 'miserable', 'devastated', 'heartbroken', 'lonely', 'overwhelmed', 'exhausted', 'hopeless', 'discouraged', 'bitter', 'resentful'];\n        const stressWords = ['exam', 'test', 'deadline', 'assignment', 'project', 'study', 'finals', 'midterm', 'homework', 'workload', 'pressure', 'busy', 'overwhelmed', 'stressed', 'tired', 'exhausted', 'rush', 'panic', 'behind', 'late'];\n        const words = text.toLowerCase().split(' ');\n        let positiveScore = 0;\n        let negativeScore = 0;\n        let stressScore = 0;\n        words.forEach(word => {\n          if (positiveWords.includes(word)) positiveScore++;\n          if (negativeWords.includes(word)) negativeScore++;\n          if (stressWords.includes(word)) stressScore++;\n        });\n\n        // Determine primary sentiment\n        if (stressScore > 0 && stressScore >= positiveScore) {\n          return {\n            label: 'Stressed',\n            confidence: Math.min(0.7 + stressScore * 0.1, 0.95)\n          };\n        } else if (negativeScore > positiveScore) {\n          return {\n            label: 'Negative',\n            confidence: Math.min(0.6 + negativeScore * 0.1, 0.95)\n          };\n        } else if (positiveScore > negativeScore) {\n          return {\n            label: 'Positive',\n            confidence: Math.min(0.6 + positiveScore * 0.1, 0.95)\n          };\n        } else {\n          return {\n            label: 'Neutral',\n            confidence: 0.5\n          };\n        }\n      }\n    };\n    isModelLoaded = true;\n    console.log('AI models loaded successfully');\n  } catch (error) {\n    console.error('Failed to initialize AI models:', error);\n    throw error;\n  }\n};\nexport const analyzeSentiment = async text => {\n  if (!isModelLoaded || !sentimentModel) {\n    throw new Error('AI models not initialized');\n  }\n  try {\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 100));\n    const result = sentimentModel.predict(text);\n    return {\n      label: result.label,\n      confidence: result.confidence,\n      text: text,\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Sentiment analysis failed:', error);\n    throw error;\n  }\n};\nexport const analyzeTypingPatterns = keystrokes => {\n  // Analyze typing speed, pauses, and patterns\n  const avgSpeed = keystrokes.length > 0 ? keystrokes.reduce((sum, k) => sum + (k.speed || 0), 0) / keystrokes.length : 0;\n  const longPauses = keystrokes.filter(k => k.pause > 2000).length;\n  const rapidTyping = keystrokes.filter(k => k.speed > 5).length;\n  let emotionalState = 'neutral';\n  let confidence = 0.5;\n  if (longPauses > 3) {\n    emotionalState = 'contemplative';\n    confidence = 0.7;\n  } else if (rapidTyping > 5) {\n    emotionalState = 'agitated';\n    confidence = 0.8;\n  } else if (avgSpeed < 2) {\n    emotionalState = 'tired';\n    confidence = 0.6;\n  }\n  return {\n    emotionalState,\n    confidence,\n    metrics: {\n      averageSpeed: avgSpeed,\n      longPauses,\n      rapidTyping,\n      totalKeystrokes: keystrokes.length\n    }\n  };\n};\nexport const generatePersonalizedIntervention = (mood, userPreferences = {}) => {\n  const interventions = {\n    negative: [{\n      type: 'breathing',\n      title: 'Calm Your Mind',\n      description: 'Try the 4-7-8 breathing technique: Inhale for 4, hold for 7, exhale for 8',\n      duration: '3 minutes',\n      effectiveness: 0.85\n    }, {\n      type: 'cognitive',\n      title: 'Reframe Your Thoughts',\n      description: 'Ask yourself: \"Is this thought helping me right now? What would I tell a friend?\"',\n      duration: '5 minutes',\n      effectiveness: 0.75\n    }, {\n      type: 'physical',\n      title: 'Take a Walk',\n      description: 'A short walk can shift your perspective and boost your mood',\n      duration: '10 minutes',\n      effectiveness: 0.80\n    }],\n    stressed: [{\n      type: 'time-management',\n      title: 'Priority Check',\n      description: 'List your top 3 priorities for today. Focus on just one at a time.',\n      duration: '5 minutes',\n      effectiveness: 0.90\n    }, {\n      type: 'relaxation',\n      title: 'Progressive Muscle Relaxation',\n      description: 'Tense and release each muscle group, starting from your toes',\n      duration: '10 minutes',\n      effectiveness: 0.85\n    }],\n    anxious: [{\n      type: 'grounding',\n      title: '5-4-3-2-1 Technique',\n      description: 'Name 5 things you see, 4 you hear, 3 you touch, 2 you smell, 1 you taste',\n      duration: '3 minutes',\n      effectiveness: 0.88\n    }]\n  };\n  const moodInterventions = interventions[mood.toLowerCase()] || interventions.negative;\n\n  // Personalize based on user preferences\n  if (userPreferences.preferredDuration) {\n    return moodInterventions.filter(i => parseInt(i.duration) <= userPreferences.preferredDuration);\n  }\n  return moodInterventions;\n};\nexport const predictMoodTrend = moodHistory => {\n  if (moodHistory.length < 7) {\n    return {\n      trend: 'insufficient_data',\n      confidence: 0\n    };\n  }\n\n  // Simple trend analysis based on recent mood patterns\n  const recentMoods = moodHistory.slice(-7);\n  const moodScores = recentMoods.map(entry => {\n    switch (entry.mood) {\n      case 'positive':\n        return 2;\n      case 'neutral':\n        return 1;\n      case 'negative':\n        return -1;\n      case 'stressed':\n        return -2;\n      default:\n        return 0;\n    }\n  });\n  const averageScore = moodScores.reduce((sum, score) => sum + score, 0) / moodScores.length;\n  const trend = averageScore > 0.5 ? 'improving' : averageScore < -0.5 ? 'declining' : 'stable';\n\n  // Calculate trend strength\n  const variance = moodScores.reduce((sum, score) => sum + Math.pow(score - averageScore, 2), 0) / moodScores.length;\n  const confidence = Math.min(Math.abs(averageScore) + 1 / (1 + variance), 0.95);\n  return {\n    trend,\n    confidence,\n    averageScore,\n    recommendation: generateTrendRecommendation(trend, averageScore)\n  };\n};\nconst generateTrendRecommendation = (trend, score) => {\n  if (trend === 'declining') {\n    return {\n      message: \"Your mood has been trending downward. Consider reaching out to campus counseling services.\",\n      priority: 'high',\n      actions: ['Schedule counseling appointment', 'Connect with peer support', 'Practice daily mindfulness']\n    };\n  } else if (trend === 'improving') {\n    return {\n      message: \"Great progress! Keep up the positive momentum with your current wellness practices.\",\n      priority: 'low',\n      actions: ['Maintain current routine', 'Share success with support network', 'Set new wellness goals']\n    };\n  } else {\n    return {\n      message: \"Your mood has been stable. Consider adding new wellness activities to boost your mental health.\",\n      priority: 'medium',\n      actions: ['Try new stress management techniques', 'Join a support group', 'Increase physical activity']\n    };\n  }\n};","map":{"version":3,"names":["tf","sentimentModel","isModelLoaded","initializeAI","console","log","Promise","resolve","setTimeout","predict","text","positiveWords","negativeWords","stressWords","words","toLowerCase","split","positiveScore","negativeScore","stressScore","forEach","word","includes","label","confidence","Math","min","error","analyzeSentiment","Error","result","timestamp","Date","toISOString","analyzeTypingPatterns","keystrokes","avgSpeed","length","reduce","sum","k","speed","longPauses","filter","pause","rapidTyping","emotionalState","metrics","averageSpeed","totalKeystrokes","generatePersonalizedIntervention","mood","userPreferences","interventions","negative","type","title","description","duration","effectiveness","stressed","anxious","moodInterventions","preferredDuration","i","parseInt","predictMoodTrend","moodHistory","trend","recentMoods","slice","moodScores","map","entry","averageScore","score","variance","pow","abs","recommendation","generateTrendRecommendation","message","priority","actions"],"sources":["/home/akil/Hackathon/MindfulCampus/src/services/aiService.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nlet sentimentModel = null;\nlet isModelLoaded = false;\n\n// Mock sentiment analysis using TensorFlow.js patterns\n// In a real implementation, you'd load a pre-trained model\nexport const initializeAI = async () => {\n  try {\n    console.log('Initializing AI models...');\n    \n    // Simulate model loading time\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Create a simple mock model for demonstration\n    sentimentModel = {\n      predict: (text) => {\n        // Simple keyword-based sentiment analysis for demo\n        const positiveWords = ['good', 'great', 'happy', 'love', 'awesome', 'amazing', 'excellent', 'wonderful', 'fantastic', 'perfect', 'best', 'better', 'beautiful', 'brilliant', 'cheerful', 'delighted', 'excited', 'grateful', 'hopeful', 'inspired', 'joyful', 'optimistic', 'pleased', 'satisfied', 'thrilled'];\n        const negativeWords = ['bad', 'sad', 'hate', 'terrible', 'awful', 'horrible', 'worst', 'angry', 'depressed', 'anxious', 'stressed', 'worried', 'frustrated', 'disappointed', 'upset', 'miserable', 'devastated', 'heartbroken', 'lonely', 'overwhelmed', 'exhausted', 'hopeless', 'discouraged', 'bitter', 'resentful'];\n        const stressWords = ['exam', 'test', 'deadline', 'assignment', 'project', 'study', 'finals', 'midterm', 'homework', 'workload', 'pressure', 'busy', 'overwhelmed', 'stressed', 'tired', 'exhausted', 'rush', 'panic', 'behind', 'late'];\n        \n        const words = text.toLowerCase().split(' ');\n        let positiveScore = 0;\n        let negativeScore = 0;\n        let stressScore = 0;\n        \n        words.forEach(word => {\n          if (positiveWords.includes(word)) positiveScore++;\n          if (negativeWords.includes(word)) negativeScore++;\n          if (stressWords.includes(word)) stressScore++;\n        });\n        \n        // Determine primary sentiment\n        if (stressScore > 0 && stressScore >= positiveScore) {\n          return { label: 'Stressed', confidence: Math.min(0.7 + stressScore * 0.1, 0.95) };\n        } else if (negativeScore > positiveScore) {\n          return { label: 'Negative', confidence: Math.min(0.6 + negativeScore * 0.1, 0.95) };\n        } else if (positiveScore > negativeScore) {\n          return { label: 'Positive', confidence: Math.min(0.6 + positiveScore * 0.1, 0.95) };\n        } else {\n          return { label: 'Neutral', confidence: 0.5 };\n        }\n      }\n    };\n    \n    isModelLoaded = true;\n    console.log('AI models loaded successfully');\n    \n  } catch (error) {\n    console.error('Failed to initialize AI models:', error);\n    throw error;\n  }\n};\n\nexport const analyzeSentiment = async (text) => {\n  if (!isModelLoaded || !sentimentModel) {\n    throw new Error('AI models not initialized');\n  }\n  \n  try {\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    const result = sentimentModel.predict(text);\n    \n    return {\n      label: result.label,\n      confidence: result.confidence,\n      text: text,\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Sentiment analysis failed:', error);\n    throw error;\n  }\n};\n\nexport const analyzeTypingPatterns = (keystrokes) => {\n  // Analyze typing speed, pauses, and patterns\n  const avgSpeed = keystrokes.length > 0 ? \n    keystrokes.reduce((sum, k) => sum + (k.speed || 0), 0) / keystrokes.length : 0;\n  \n  const longPauses = keystrokes.filter(k => k.pause > 2000).length;\n  const rapidTyping = keystrokes.filter(k => k.speed > 5).length;\n  \n  let emotionalState = 'neutral';\n  let confidence = 0.5;\n  \n  if (longPauses > 3) {\n    emotionalState = 'contemplative';\n    confidence = 0.7;\n  } else if (rapidTyping > 5) {\n    emotionalState = 'agitated';\n    confidence = 0.8;\n  } else if (avgSpeed < 2) {\n    emotionalState = 'tired';\n    confidence = 0.6;\n  }\n  \n  return {\n    emotionalState,\n    confidence,\n    metrics: {\n      averageSpeed: avgSpeed,\n      longPauses,\n      rapidTyping,\n      totalKeystrokes: keystrokes.length\n    }\n  };\n};\n\nexport const generatePersonalizedIntervention = (mood, userPreferences = {}) => {\n  const interventions = {\n    negative: [\n      {\n        type: 'breathing',\n        title: 'Calm Your Mind',\n        description: 'Try the 4-7-8 breathing technique: Inhale for 4, hold for 7, exhale for 8',\n        duration: '3 minutes',\n        effectiveness: 0.85\n      },\n      {\n        type: 'cognitive',\n        title: 'Reframe Your Thoughts',\n        description: 'Ask yourself: \"Is this thought helping me right now? What would I tell a friend?\"',\n        duration: '5 minutes',\n        effectiveness: 0.75\n      },\n      {\n        type: 'physical',\n        title: 'Take a Walk',\n        description: 'A short walk can shift your perspective and boost your mood',\n        duration: '10 minutes',\n        effectiveness: 0.80\n      }\n    ],\n    stressed: [\n      {\n        type: 'time-management',\n        title: 'Priority Check',\n        description: 'List your top 3 priorities for today. Focus on just one at a time.',\n        duration: '5 minutes',\n        effectiveness: 0.90\n      },\n      {\n        type: 'relaxation',\n        title: 'Progressive Muscle Relaxation',\n        description: 'Tense and release each muscle group, starting from your toes',\n        duration: '10 minutes',\n        effectiveness: 0.85\n      }\n    ],\n    anxious: [\n      {\n        type: 'grounding',\n        title: '5-4-3-2-1 Technique',\n        description: 'Name 5 things you see, 4 you hear, 3 you touch, 2 you smell, 1 you taste',\n        duration: '3 minutes',\n        effectiveness: 0.88\n      }\n    ]\n  };\n  \n  const moodInterventions = interventions[mood.toLowerCase()] || interventions.negative;\n  \n  // Personalize based on user preferences\n  if (userPreferences.preferredDuration) {\n    return moodInterventions.filter(i => \n      parseInt(i.duration) <= userPreferences.preferredDuration\n    );\n  }\n  \n  return moodInterventions;\n};\n\nexport const predictMoodTrend = (moodHistory) => {\n  if (moodHistory.length < 7) {\n    return { trend: 'insufficient_data', confidence: 0 };\n  }\n  \n  // Simple trend analysis based on recent mood patterns\n  const recentMoods = moodHistory.slice(-7);\n  const moodScores = recentMoods.map(entry => {\n    switch (entry.mood) {\n      case 'positive': return 2;\n      case 'neutral': return 1;\n      case 'negative': return -1;\n      case 'stressed': return -2;\n      default: return 0;\n    }\n  });\n  \n  const averageScore = moodScores.reduce((sum, score) => sum + score, 0) / moodScores.length;\n  const trend = averageScore > 0.5 ? 'improving' : averageScore < -0.5 ? 'declining' : 'stable';\n  \n  // Calculate trend strength\n  const variance = moodScores.reduce((sum, score) => sum + Math.pow(score - averageScore, 2), 0) / moodScores.length;\n  const confidence = Math.min(Math.abs(averageScore) + (1 / (1 + variance)), 0.95);\n  \n  return {\n    trend,\n    confidence,\n    averageScore,\n    recommendation: generateTrendRecommendation(trend, averageScore)\n  };\n};\n\nconst generateTrendRecommendation = (trend, score) => {\n  if (trend === 'declining') {\n    return {\n      message: \"Your mood has been trending downward. Consider reaching out to campus counseling services.\",\n      priority: 'high',\n      actions: ['Schedule counseling appointment', 'Connect with peer support', 'Practice daily mindfulness']\n    };\n  } else if (trend === 'improving') {\n    return {\n      message: \"Great progress! Keep up the positive momentum with your current wellness practices.\",\n      priority: 'low',\n      actions: ['Maintain current routine', 'Share success with support network', 'Set new wellness goals']\n    };\n  } else {\n    return {\n      message: \"Your mood has been stable. Consider adding new wellness activities to boost your mental health.\",\n      priority: 'medium',\n      actions: ['Try new stress management techniques', 'Join a support group', 'Increase physical activity']\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}